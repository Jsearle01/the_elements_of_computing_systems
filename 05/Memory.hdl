// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * This chip implements the complete address space of the 
 * computer's data memory, including RAM and memory mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: If load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load == 1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output in the next time step.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000 to 0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here.

    // 0x4000 - 100000000000000
    // 0x5FFF - 101111111111111
    // 0x6000 - 110000000000000

    // 00 ram
    // 01 ram
    // 10 screen
    // 11 kbd

    // Not(in=address[13],out=n13);
    // Not(in=address[14],out=n14);

    // And(a=n13,b=n14,out=rama);
    // And(a=n14,b=address[13],out=ramb);
    // Or(a=rama,b=ramb,out=ram);

    // And(a=n14,b=address[13],out=screen);
    // And(a=address[13],b=address[14],out=kbd);

    // And(a=ram,b=load,out=rload);
    // And(a=screen,b=load,out=sload);
    // And(a=kbd,b=load,out=kload);

    // RAM16K(in[0..14]=in[0..14],address=address[0..13],load=rload,out=rout);
    // Screen(in=in,load=sload,address=address[0..12],out=sout);
    // Keyboard(out=kout);

    DMux4Way(in=load,sel=address[13..14],a=rloada,b=rloadb,c=sload,d=kload);
    Or(a=rloada,b=rloadb,out=rload);
    RAM16K(in[0..14]=in[0..14],address=address[0..13],load=rload,out=rout);
    Screen(in=in,load=sload,address=address[0..12],out=sout);
    Keyboard(out=kout);
    Mux4Way16(a=rout,b=rout,c=sout,d=kout,sel=address[13..14],out=out);
}

