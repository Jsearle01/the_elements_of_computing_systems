class Brainfuck {
    static char K_PLUS;
    static char K_MINUS;
    static char K_LESS_THAN;
    static char K_GREATER_THAN;
    static char K_DOT;
    static char K_APOSTROPY;
    static char K_LEFT_SQUARE_BRACKET;
    static char K_RIGTH_SQUARE_BRACKET;
    static char K_SPACE;

    field Array array;
    field int arrayLength;
    field int pointer;

    field String line;
    field int lineOffset;
    field int lineLength;

    field Stack loops;

    function void init() {
        let K_PLUS                 = 43;
        let K_MINUS                = 45;
        let K_LESS_THAN            = 60;
        let K_GREATER_THAN         = 62;
        let K_DOT                  = 46;
        let K_APOSTROPY            = 39;
        let K_LEFT_SQUARE_BRACKET  = 91;
        let K_RIGTH_SQUARE_BRACKET = 93;
        let K_SPACE                = 32;
        return;
    }

    constructor Brainfuck new(int length) {
        let loops = Stack.new(15);
        let pointer = 0;
        let array = Array.new(length);
        let arrayLength = length;
        return this;
    }

    method void reset() {
        var int i;

        // Zero array
        while (i < arrayLength) {
            let array[i] = 0;
            let i = i + 1;
        }

        let pointer = 0;

        return;
    }

    method void eval(String input) {
        var Brainfuck self;
        var int length;
        var char c;

        let self = this;
        let line = input;
        let lineOffset = 0;
        let lineLength = input.length();

        while (lineOffset < lineLength) {
            // do self.debug();
            let c = input.charAt(lineOffset);
            do Brainfuck.evalChar(this, c);
            let lineOffset = lineOffset + 1;
        }
        // do self.debug();
        do Output.println();

        return;
    }

    function void evalChar(Brainfuck self, char c) {
        if (c = K_PLUS) {
            do self.actionPlus();
            return;
        }
        if (c = K_MINUS) {
            do self.actionMinus();
            return;
        }
        if (c = K_LESS_THAN) {
            do self.actionLessThan();
            return;
        }
        if (c = K_GREATER_THAN) {
            do self.actionGreaterThan();
            return;
        }
        if (c = K_DOT) {
            do self.actionDot();
            return;
        }
        if (c = K_APOSTROPY) {
            do self.actionApostropy();
            return;
        }
        if (c = K_LEFT_SQUARE_BRACKET) {
            do self.actionLeftBracket();
            return;
        }
        if (c = K_RIGTH_SQUARE_BRACKET) {
            do self.actionRightBracket();
            return;
        }

        // ignore unknown characters
        // useful for comments

        return;
    }

    method void actionPlus() {
        let array[pointer] = array[pointer] + 1;
        return;
    }

    method void actionMinus() {
        let array[pointer] = array[pointer] - 1;
        return;
    }

    method void actionLessThan() {
        let pointer = pointer - 1;
        return;
    }

    method void actionGreaterThan() {
        let pointer = pointer + 1;
        return;
    }

    method void actionDot() {
        do Output.printChar(array[pointer]);
        return;
    }

    method void actionApostropy() {
        let array[pointer] = Keyboard.readChar();
        return;
    }

    method void actionLeftBracket() {
        var int i;
        var Brainfuck b;

        let i = array[pointer];
        let b = this;

        if (i = 0) {
            do b.jumpForward();
        } else {
            do loops.push(lineOffset);
        }
        return;
    }

    method void actionRightBracket() {
        var int i;

        let i = array[pointer];

        if (i = 0) {
            do loops.pop();
        } else {
            let lineOffset = loops.top();
        }
        return;
    }

    method void jumpForward() {
        var boolean pairNotFound;
        var char c;
        var int loopsFound;

        let pairNotFound = true;

        while (pairNotFound) {
            let c = line.charAt(lineOffset);

            if (c = K_LEFT_SQUARE_BRACKET) {
                let loopsFound = loopsFound + 1;
            }

            if (c = K_RIGTH_SQUARE_BRACKET) {
                let loopsFound = loopsFound - 1;
            }

            if (loopsFound = 0) {
                let pairNotFound = false;
            }

            let lineOffset = lineOffset + 1;
        }
        return;
    }

    method void debug () {
        do Output.println();
        do Output.printInt(pointer);
        do Output.printString(", ");
        do Output.printInt(array[pointer]);
        do Output.printString(", ");
        do Output.printInt(lineOffset);
        do Output.println();
        return;
    }
}

