// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
    static Array twoToThe;

    /** Initializes the library. */
    function void init() {
        var int i, shift;
        let i = 0;
        let shift = 1;
        let twoToThe = Array.new(16);
        while (i < 16) {
            let twoToThe[i] = shift;
            let shift = shift + shift;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (Math.bit(x, 15)) {
            return (~x) + 1;
        } else {
            return x;
        }
    }

    function int bit(int number, int bit) {
        if ((number & twoToThe[bit]) = 0) {
            return 0;
        } else {
            return -1;
        }
    }

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum;
        var int shiftedX;
        var int j;
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while (j < 16) {
            if (Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y) {
        var int xIsNeg, yIsNeg;
        var int q, returnValue;

        /*do Output.printString("Divide: ");*/
        /*do Output.printInt(x);*/
        /*do Output.printString(", ");*/
        /*do Output.printInt(y);*/
        /*do Output.println();*/
        if (y = 0) {
            do Sys.error(3);
            return 1;
        }

        let xIsNeg = Math.bit(x, 15);
        let yIsNeg = Math.bit(y, 15);

        if (xIsNeg) {
            let x = Math.abs(x);
        }

        if (yIsNeg) {
            let y = Math.abs(y);
        }

        if (y > x) {
            return 0;
        }

        if (y > (16384 -1)) {
            return 1;
        }

        let q = Math.divide(x, 2 * y);
        if ((x - (2 * q * y)) < y) {
            let returnValue = 2 * q;
        } else {
            let returnValue = (2 * q) + 1;
        }

        if (xIsNeg | yIsNeg) {
            if (xIsNeg & yIsNeg) {
                return returnValue;
            } else {
                return -returnValue;
            }
        } else {
            return returnValue;
        }

    }

    function int and(int a, int b) {
        if (a = -1) {
            if (b = -1) {
                return -1;
            }
        }
        return 0;
    }

    function int or(int a, int b) {
        if (a = -1) {
            return -1;
        }
        if (b = -1) {
            return -1;
        }
        return 0;
    }

    function int rshift(int n, int shift) {
        var int i, j;
        var int returnValue;
        let i = shift;
        while (i < 16) {
            if ((i + shift) < 16) {
                if (Math.bit(n, i)) {
                    let returnValue = returnValue | twoToThe[j];
                }
            }
            let i = i + 1;
            let j = j + 1;
        }
        return returnValue;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int number) {
      var int n;
      var int n1, n1Squared;

      /*do Output.println();*/
      /*do Output.printString("sqrt: ");*/
      /*do Output.printInt(number);*/
      /*do Output.println();*/

      let n = 1;
      let n1 = Math.rshift(number, 1);

      while(Math.abs(n1 - n) > 1) {
          let n = n1;
          let n1 = Math.rshift(n + (number/n), 1);
          /*do Output.printString("next:");*/
          /*do Output.printInt(n1);*/
          /*do Output.println();*/
          /*do Keyboard.readChar();*/
      }

      let n1Squared = n1 *n1;
      while( n1Squared > number) {
        let n1 = n1 - 1;
      }

      /*do Output.printString("root:");*/
      /*do Output.printInt(n1);*/
      /*do Output.println();*/
      /*do Keyboard.readChar();*/

      return n1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        } else {
            return b;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        } else {
            return b;
        }
    }
}
