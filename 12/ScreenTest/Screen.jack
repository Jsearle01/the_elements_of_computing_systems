// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {
    static boolean drawBlack;
    static Array twoToThe;

    /** Initializes the Screen. */
    function void init() {
        var int i, shift;

        let i = 0;
        let shift = 1;
        let twoToThe = Array.new(16);

        while (i < 16) {
            let twoToThe[i] = shift;
            let shift = shift + shift;
            let i = i + 1;
        }

        let drawBlack = true;
        return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
        let drawBlack = b;
        return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
        var int cellAddress;
        var int bit;
        var int cell;
        var int mask;

        let cellAddress = 16384 + (y * 32) + (x / 16);

        let bit = x - ((x / 16) * 16);

        let mask = twoToThe[bit];

        let cell = cellAddress[0];
        if (drawBlack) {
            let cell = cell | mask;
        } else {
            let cell = cell & (~mask);
        }
        let cellAddress[0] = cell;
        return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int a, b;
        var int dx, dy;
        var int adyMinusbdx;
        var int temp;

        let dx = x2 - x1;
        let dy = y2 - y1;

        /*do Output.printInt(dx);*/
        /*do Output.printString(", ");*/
        /*do Output.printInt(dy);*/
        /*do Output.println();*/

        if (dx = 0) {
            do Screen.vline(y1, y2, x1);
            return;
        }

        if (dy = 0) {
            do Screen.hline(x1, x2, y1);
            return;
        }

        if (dx < 0) {
            if (dy < 0) {
                let dx = Math.abs(dx);
                let dy = Math.abs(dy);
                let temp = x1;
                let x1 = x2;
                let x2 = temp;
                let temp = y1;
                let y1 = y2;
                let y2 = temp;
            }
        }


        let a = 0;
        let b = 0;
        let adyMinusbdx = 0;

        if (dx > 0) {
            if (dy > 0) {
                let a = 0;
                // a <= dx and b <= dy
                while ((~(a > dx)) & (~(b > dy))) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (adyMinusbdx < 0) {
                        let a = a + 1;
                        let adyMinusbdx = adyMinusbdx + dy;
                    } else {
                        let b = b + 1;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                }
            } else {
                let dy = Math.abs(dy);
                while ((~(a > dx)) & (~(b > dy))) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (adyMinusbdx < 0) {
                        let a = a + 1;
                        let adyMinusbdx = adyMinusbdx + dy;
                    } else {
                        let b = b - 1;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                }
            }
        } else {
            if (dy > 0) {
                let dx = Math.abs(dx);
                while ((~(a > dx)) & (~(b > dy))) {
                    do Screen.drawPixel(x1 + a, y1 + b);
                    if (adyMinusbdx < 0) {
                        let a = a - 1;
                        let adyMinusbdx = adyMinusbdx + dy;
                    } else {
                        let b = b + 1;
                        let adyMinusbdx = adyMinusbdx - dx;
                    }
                }
            }
        }
        return;
    }

    function void hline(int x1, int x2, int y) {
        var int x, limit;
        let x = Math.min(x1, x2);
        let limit = Math.max(x1, x2);
        while (~(x > limit)) {
            do Screen.drawPixel(x, y);
            let x = x + 1;
        }
        return;
    }

    function void vline(int y1, int y2, int x) {
        var int y, limit;
        let y = Math.min(y1, y2);
        let limit = Math.max(y1, y2);
        while (~(y > limit)) {
            do Screen.drawPixel(x, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int x, y;
        let y = y1;
        while (~(y = y2)) {
            let x = x1;
            while (~(x = x2)) {
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
        var int dx, dy;
        var int a, b;
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt((r * r) - (dy * dy));
            do Screen.drawPixel(cx + dx, cy + dy);
            do Screen.drawLine(cx - dx, cy + dy, cx + dx, cy + dy);
            let dy = dy + 1;
        }
        return;
    }
}
